name: Build and Deploy k4all

on:
  # schedule:
  #   - cron: "40 4 * * 1" # Runs at 4:40 UTC every Monday
  pull_request:
    branches:
      - image-based
    paths-ignore:
      - "**/*.md"
      - "**/*.txt"
  push:
    branches:
      - image-based
    paths-ignore:
      - "**/*.md"
      - "**/*.txt"
  workflow_dispatch:
    inputs:
      changelog:
        description: 'Brief description of changes in this build'
        required: false

env:
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
  IMAGE_NAME: k4all-image
  K4ALL_VERSION: testing
  ARCH: x86_64
  VARIANT: CoreOS
  ISO_NAME: k4all-${{ github.ref_name }}-testing.iso

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name || github.run_id }}
  cancel-in-progress: true

jobs:
  build-and-push-image:
    name: Build and Push Fedora CoreOS Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Containerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:latest

 build-iso:
    name: Build Bootable ISO
    needs: build-and-push-image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install CoreOS Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y coreos-installer xorriso

      - name: Download Custom CoreOS Image
        run: |
          curl -L -o custom-coreos.img "https://${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"

      - name: Create Bootable ISO
        run: |
          mkdir -p iso-output
          coreos-installer iso customize \
            --dest-device /dev/sda \
            --dest-image iso-output/${{ env.ISO_NAME }} \
            --image-file custom-coreos.img \
            --live-kargs ignition.firstboot

      - name: Move ISO to Upload Directory
        id: upload-directory
        shell: bash
        run: |
          ISO_UPLOAD_DIR=${{ github.workspace }}/upload
          mkdir -p ${ISO_UPLOAD_DIR}
          mv iso-output/${{ env.ISO_NAME }} ${ISO_UPLOAD_DIR}
          echo "iso-upload-dir=${ISO_UPLOAD_DIR}" >> $GITHUB_OUTPUT

      - name: Upload ISO to Job Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IMAGE_NAME }}-${{ github.ref_name }}
          path: ${{ steps.upload-directory.outputs.iso-upload-dir }}
          if-no-files-found: error
          retention-days: 7
          overwrite: true

  generate-release:
    name: Generate Release
    needs: build-iso
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Branch Name
        id: get-branch
        run: |
          BRANCH_NAME=${GITHUB_REF##*/}
          echo "branch=${BRANCH_NAME}" >> $GITHUB_OUTPUT

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.IMAGE_NAME }}-${{ steps.get-branch.outputs.branch }}
          path: ./artifacts

      - name: Generate Changelog
        id: generate-changelog
        run: |
          echo "This release was generated for branch ${{ steps.get-branch.outputs.branch }}" > changelog.md

      - name: Create or Update Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ steps.get-branch.outputs.branch }}
          tag_name: ${{ steps.get-branch.outputs.branch }}
          body_path: ./changelog.md
          make_latest: ${{ steps.get-branch.outputs.branch == 'main' }}
          prerelease: ${{ steps.get-branch.outputs.branch != 'main' }}

      - name: Upload ISO to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./artifacts/${{ env.ISO_NAME }}
          asset_name: ${{ env.ISO_NAME }}
          content_type: application/octet-stream
